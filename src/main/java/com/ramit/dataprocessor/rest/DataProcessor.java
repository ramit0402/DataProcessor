package com.ramit.dataprocessor.rest;import com.ramit.dataprocessor.components.DataModel;import com.ramit.dataprocessor.exceptions.DataDisruptedException;import com.ramit.dataprocessor.exceptions.RequestNotFoundException;import io.swagger.annotations.ApiOperation;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.concurrent.ConcurrentHashMap;import static com.ramit.dataprocessor.utils.RequestIDGenerator.*;@RestController@RequestMapping("/api")public class DataProcessor {    ConcurrentHashMap<String, DataModel> requestDataMap = new ConcurrentHashMap<>();    ConcurrentHashMap<Long, String> requestIdMap = new ConcurrentHashMap<>();    @PostMapping("/start")    @ApiOperation(value="Start processing of the required data",            notes = "Provide data to be processed in the data field",            response = DataModel.class)    public DataModel startProcessing(@RequestBody DataModel dataModel) {        // Generate and set id for this particular request        long id = getUniqueRequestId();        dataModel.setId(id);        // Remove dataModel form requestDataMap so that its is not being processed        if(requestDataMap.contains(dataModel.getData())) {            requestDataMap.remove(dataModel.getData());        }        // Storing dataModel for processing        requestDataMap.put(dataModel.getData(), dataModel);        requestIdMap.put(id, dataModel.getData());        return dataModel;    }    @PostMapping("/end")    @ApiOperation(value="End processing for the required data",            notes = "Provide request id of the data for termination",            response = DataModel.class)    public DataModel endProcessing(@RequestBody DataModel dataModel) {        long id = dataModel.getId();        if(requestIdMap.containsKey(id) && requestDataMap.get(requestIdMap.get(id)).getId() == id) {            // Removing from HashMap as '/end' is called            String mapData = requestIdMap.remove(id);            return requestDataMap.remove(mapData);        } else if(requestIdMap.containsKey(id)) {            // Throw dataModel processing has been disrupted            throw new DataDisruptedException("DataModel disrupted");        } else {            // Throw no request found with this id            throw new RequestNotFoundException("No such request found");        }    }}